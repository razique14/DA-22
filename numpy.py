# -*- coding: utf-8 -*-
"""Numpy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckpFJlh-hEkw_-15hrjjX3wfcQ_AEdag

numpy Library

numpy : stands for Numerical Python

Like list in Python, array is a datastructure for numpy

* Python List is a collection of heterogenous datatypes items. It takes huge amount of time and memory for numerical computations of large data.

 * Numpy array is a collection of homogenous datatypes items. It takes very little amount of memory and time in comparision with list in terms of numerical computation of large data.
"""

# from numpy import *

import numpy as np

# a = []
# np.array([1,2,3])
# print(np.array([1,'raz',2.5,2+4j,(1,2)]))
# print(np.array[1,2.3])
a = np.array([1,'raz',2.5,2+4j,(1,2)])
print(a,type(a))

# np.arange(2,10,2)
np.arange(1,10)

a = [1,2]
b = [3,4]
c = np.array([a,b])
c
c.size
c.shape
# type(c)

"""The number of dimensions and items in an array is defined by its shape.

* The dimensions are also called as axes.

* ndarray : n-Dimensional array

 0D - Scalar

 1D Array - Vector

 2D Array - Matrix

 3D or more (Multi Dimension) - Tensor
"""

a = [1,3,5]
b = [2,4,6]
c = [7,8,9]
d = np.array([a,b,c])
c
# d.size
d.shape
# type(c)

d.ndim

print(d)
d.reshape(1,9)
d.reshape(9,1)
# d.reshape(2,6)  #error

# d.shape = (1,9)
d.shape = (9,1)

np.array([np.ones(3),np.ones(3),np.ones(3)])
np.ones((3,3))

# np.zeros(1)
np.zeros((2,5))

np.zeros((0,2,5))
# np.zeros((0,2,5))
# np.zeros((1,2,5))
# np.zeros((2,2,5))
# np.zeros((3,2,5))
# np.zeros((4,2,5))

# np.full((row,col),val)
# np.full((1,2),3)
# np.full((2,2),3)
np.full((3,3),3)

# np.full(number of items, value)
np.full(1,2)
np.full(2,2)
np.full(3,2)



"""SLICING"""

A = np.array([1,2,3,4,5])
# A[4]
# A[3]=7
# A[-1:]  #array([5])
# A[:-2]  #array([1,2,3])
# A[1:7]
# A[1:4:2]
A[:5:2]
# A

a = [1,2,3]
b = [3,4,5]
c = [5,6,7]
d = np.array([a,b,c])
# array_name[row_start_val:row_end_val, col_start_val:col_end_val]
print(d)
d[:2]
d[0:2,1:3]

a = [1,2,3]
b = [3,4,5]
c = [5,6,7]
d = np.array([a,b,c])
d[1:3,0:2]

a = [1,2,3]
b = [3,4,5]
c = [5,6,7]
d = np.array([a,b,c])
# d[0:,0:3:2]
d[1:3,1:2]

arr3 = np.array([[1, 2, 3, 4, 5],
       [6,7,8,9,10],
       [11, 12, 13, 14, 15]])
# arr3[1:,1:4]
# arr3[2:,2:4]
# arr3[0:2,0:5:32]
# arr3[1:,1:5:3]
# arr3[0:2,1:5:2]
# arr3[1:,2:5:2]
arr3[2:,0:5:2]

"""Line space"""

# np.linspace(start,end,equally_spacing_value)
np.linspace(1,2,5)

"""Addition of items

np.append()
"""

a = np.arange(10)
# a[4]=10
np.append(a,10)
# a

a = np.arange(10)
a  = np.append(a,[10,11,12])
a

"""Deletion of items

np.delete()
"""

a = np.arange(10)
a = np.delete(a,[1,3,5,7])
a

a = np.arange(10)
a  = np.delete(a,[1,3,5,7])
a

"""Sorting of items

np.sort()
"""

a = np.array([10,34,6776,3,8,2,4,5,6,6,7,8,8,8])
np.sort(a)

# to find squareroot of an element
a = np.array([7,4,9,6,8,2])
np.sqrt(a)

# to find exponential of an element
a = np.array([7,4,9,6,8,2])
np.exp(a)

# np.random.rand(10)
np.random.randint(1,10,5)

np.random.randn(2)

"""Arithmetic of arrays"""

a = np.array([1,2,3])
b = np.array([4,5,6])
# a+b
# a-b
# a*b
# a/b
# a//b
# a%b

a = np.array([1,2,3])
b = np.array([4,5,6])
a-b

a = np.array([1,2,3])
b = np.array([4,5,6])
a*b

a = np.array([1,2,3])
# a+4 #scalar addition
# a-3 #scalar subtraction
# a*3 #saclar multiplication

a = [1,2]
b = [4,5]
d = np.array([a,b])
c = np.array([3,8])
d+c

"""Comparision of arrays

*  Logical 

*  Bitwise
"""

a = np.array([1,2])
b = np.array([4,5])
# b>a
a==b

a = np.array([1,2])
b = np.array([4,2])
# a|b
# a^b
a&b

a = [1,2]
b = [4,5]
c = np.array([3,8])
d = np.array([a,b])
# d==c
# d>c
d|c
d^c
d&c

"""Statistical methods"""

a = np.arange(10)
print(a)
np.mean(a)

a = [1,2,3]
b = [4,5,6]
c = np.array([a,b])
np.mean(c)

a = [1,2]
b = [4,5]
c = np.array([3,8])
d = np.array([a,b])
np.mean(d)

a = np.arange(10)
print(a)
np.median(a)

a = [1,2,3]
b = [4,5,6]
c = np.array([a,b])
np.median(c)

a = [1,2]
b = [4,5]
c = np.array([3,8])
d = np.array([a,b])
np.median(d)

a = np.arange(5)
print(a)
np.std(a)

a = [1,2]
b = [4,5]
c = np.array([a,b])
np.std(c)

a = [1,2]
b = [4,5]
c = np.array([3,8])
d = np.array([a,b])
np.std(d)

import numpy as np
a = np.array([1,2])
# b = np.array([1,3,4],[2,4,6])
# c = np.array([a,b])
a.sum()

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
a.sum()

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
a.sum(axis=1)  #

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
a.sum(axis=0)

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
a.mean(axis=1)

a = np.array([1,2])
a.mean(axis=1)

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
a.mean(axis=0)

a = np.array([1,2])
a.mean(axis=0)

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
# a.cumsum()
a.cumsum(axis=1)

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
# a.cumprod()
a.cumprod(axis=1)

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
# a.max()
a.min()

a = np.array([[1,2,3,4,5],[6,7,8,9,1]])
# a.var()
a.std()

"""Efficiency of Numpy"""

a = list(range(10))
b = list(range(10))
def sum(a,b):
  c = []
  for i in range(len(a)):
    c.append(a[i]+b[i])
    return c
sum(a,b)

b = list(range(8))
b

a =np.arange(10)
b =np.arange(10)
def sum(a,b):
    return a+b
sum(a,b)

a = list(range(10))
b = list(range(10))
def list__sum(a,b):
  c = []
  for i in range(len(a)):
    c.append(a[i]+b[i])
    return c
list__sum(a,b)

a =np.arange(10)
b =np.arange(10)
def array__sum(a,b):
    return a+b
array__sum(a,b)

from timeit import Timer
t1 = Timer ('list__sum()','from __main__import list_sum')
t2 = Timer ('array__sum()','from __main__import array__sum')
print(t1.timeit(100))



"""Intersection"""

ar1 = np.array([1,2,3,4,50])
ar2 = np.array([10,20,30,40,50]) 
np.intersect1d(ar1,ar2)

ar1 = np.array([1,2,3,4,50])
ar2 = np.array([10,20,30,40,50]) 
np.intersect1d(ar1,ar2)

"""Set difference"""

ar1 = np.array([[1,2,3,4,50]])
ar2 = np.array([[10,20,30,40,50]]) 
np.setdiff1d(ar1,ar2)

ar1 = np.array([[1,2,3,4,50]])
ar2 = np.array([[10,20,30,40,50]]) 
np.setdiff1d(ar2,ar1)

"""Multiplication of arrays"""

ar1 = np.array([1,2,3,4,50])
ar2 = np.array([10,20,30,40,50]) 
(ar1*ar2)

ar1 = np.array([[1,2],[3,4]])
ar2 = np.array([[1,2],[3,4]]) 
(ar1*ar2)

ar1 = np.array([[1,2],[3,4]])
ar2 = np.array([[1,2],[3,4]]) 
(ar1 @ ar2)

ar1 = np.array([[1,2,3,4]])
ar2 = np.array([[1],[2],[3],[4]])
ar1*ar2

ar1 = np.array([[1,2,3,4]])
ar2 = np.array([[1],[2],[3],[4]])
ar1@ar2

a = np.array([[1,2],[3,4],[5,6]])
b = np.array([[1,2,3,4],[5,6,7,8]])
a@b

"""Stacking

1. hstack()  - rows must be same 
2. vstack()  - colomun must be same 
3. column_stack()  - rows & columns must be same
"""

# Horizontal stack  
ar1 = np.array([1,2,3,4,50])
ar2 = np.array([10,20,30,40,50])
np.hstack((ar1,ar2))

ar1 = np.array([1,2,3,4,50])
ar2 = np.array([10,20,30,40,50]) 
np.vstack((ar1,ar2))

a = np.array([[1,2],[3,4],[5,6]])
b = np.array([[1,2],[5,6],[3,4]])
# np.hstack((a,b))
np.vstack((a,b))

ar1 = np.array([1,2,3,4,50])
ar2 = np.array([10,20,30,40,50]) 
np.column_stack((ar1,ar2))

ar1 = np.array([[1,2,3,4,50]])
ar2 = np.array([[10,20,30,40,50]]) 
np.column_stack((ar1,ar2))

a = np.array([[1,2],[3,4],[5,6]])
# a.transpose()
a.T

np.arange(15).reshape(3,5)

print('\n',np.arange(15).reshape(3,5))
print('\n',np.arange(15).reshape(3,5))

"""Dot product (matrix multiplication)

Cross product
"""

a = np.array([[1,2],[3,4]])
np.dot(a,a.T)

"""save and load an array"""

a = np.array([[1,2],[3,4]])
np.save('array_A',a)

np.load('array_A.npy')

# create an array called friends which has name (tom,joy,bill),(tom,jam,ash,sam)

friends  = np.array(['tom','joy','bill','tom','jam','ash','sam'])
friends

# create a variable called score consists of 7 rows and 4 columns

score = np.arange(28)
score.reshape(7,4)

# scores of  tom?

friends  = np.array(['tom','joy','bill','tom','jam','ash','sam'])
score = np.random.randn(7,4)

friends == 'tom'

score

#1 Score of tom
score[friends =='tom']

#2 Only 1st and 2nd column values of tom
score[friends =='tom'][0:2,0:2]

#3 score of tom and sam
# score[0::3,0:5]
a = score[friends =='tom']
b = score[friends =='sam']
print(a,b)

#4  Score Other than tom
score[friends != 'tom']

#5 only positive scores of all friends
a = score > 0
print(score[a])