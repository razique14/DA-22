--   SERIAL CONCEPT
-- the serial concept what we use is the old 
-- the alternative method that only post gre has is
-- serial alternative 
-- *1 generated always as identity
-- *2 generated by default 


create table color(
color_id int generated always as identity,
color_name varchar not null
);

insert into color(color_name)
values('blue');

select * from color ;

insert into color(color_name,color_id)
values('blue',45);

select * from color ;
-- the above code shows the error 
-- i.e ERROR:  cannot insert a non-DEFAULT value into column "color_id"
-- DETAIL:  Column "color_id" is an identity column defined as GENERATED ALWAYS.

-- but if you want to forcefully write it the use 
-- overriding system value

insert into color(color_name,color_id)
overriding system value
values('blue',45);

select * from color;

-- ------------------------------------------------------------
create table color2(
color_id serial ,
color_name varchar not null
);

insert into color2(color_name,color_id)
values('blue',45);

select * from color2;

-- --------------------------------------------------------------------------

create table color3(
color_id int generated by default as identity,
color_name varchar not null
);

insert into color3(color_name)
values('blue');

insert into color3(color_id,color_name)
-- overriding system value
values (2,'blue');

select * from color3 ;

-- --------------------------------------------------------------

--  we can also increment  as we want 

drop table if exists color3;

create table color3(
color_id int generated by default as identity
(start with 5 increment by 5), 
color_name varchar not null
);

insert into color3(color_name)
values('blue');

insert into color3(color_id,color_name)
-- overriding system value
values (2,'blue');

select * from color3 ;



-- ----------------------------------------------------------------

-- drop table if exists color4;

create table color4(
color_id int not null,
color_name varchar not null
);

select * from color4;

alter table color4
alter column color_id add generated always as identity
drop identity if exists;


-- ---------------------------------------------------------------------------------------
---primary key

create table po_header(
po_no integer primary key,
vendor_no  integer ,
description text ,
shipping_address text
);



--  alternative way of the primary key
create table po_header(
po_no integer,
vendor_no  integer ,
description text ,
shipping_address text,
	primary key(po_no)
);


-- adding primary to the existing table 
create table po_headers(
po_no integer,
vendor_no  integer ,
description text ,
shipping_address text
);

-- to add primary key to the existing table 
alter table po_headers
add primary key(po_no);

-- to delete/drop the primary key from the existing table
alter table po_headers
drop constraint po_no;


create table po_header1(
po_no integer,
vendor_no  integer ,
description text ,
shipping_address text,
	primary key(po_no)
);

-- alter table po_headers
-- drop constraint po_no
--  in the above code it is executing 
-- so remmber thet to drop the primary key we should use 
-- tablename_pkey
-- and if we want to see one  which is primary key  then we should 
-- go to the properties

-- -----------------------------------------------------------------------

--  FOREIGN KEY

-- a table which has foreign key is the parent table and thetable which is refrenced
-- is the child table.

drop table if exists customer2 cascade;
--  thee cascade is used intt he above line to delete it any how
drop table if exists contacts2;

create table customers2(
customer_id int generated always as identity,
customer_name varchar(255)not null,
primary key(customer_id)
);

create table contacts2(
contact_id int generated always as identity,
customer_id int,
contact_name varchar(255) not null,
primary key(contact_id),
constraint fk_customer
foreign key (customer_id)
references customers2(customer_id));


insert into customers2(customer_name)
values 
('moin'),
('sufiyaan'),
('razik'),
('kaif');

select * from customers2;

delete from customers2 where customer_id=3;

select * from customers2;


insert into contacts2(contact_name)
values 
('moin'),
('sufiyaan'),
('razik'),
('kaif');

select * from contacts2;



-- ---------------------------------------------------------------------------------

drop table if exists customers2 cascade;
--  thee cascade is used intt he above line above line to delete it any how
drop table if exists contacts2;

create table customers2(
customer_id int generated always as identity,
customer_name varchar(255)not null,
primary key(customer_id)
);

create table contacts2(
contact_id int generated always as identity,
customer_id int,
contact_name varchar(255) not null,
primary key(contact_id),
constraint fk_customer
foreign key (customer_id)
references customers2(customer_id)
on delete set null);


insert into customers2(customer_name)
values 
('moin'),
('sufiyaan'),
('razik'),
('kaif');

select * from customers2;

delete from customers2 where customer_id=3;

select * from customers2;


insert into contacts2(contact_name)
values 
('moin'),
('sufiyaan'),
('razik'),
('kaif');

select * from contacts2;

-----check costraints---------------------------------------------------------------------

DROP TABLE IF EXISTS employees;

CREATE TABLE employees (
	id SERIAL PRIMARY KEY,
	first_name VARCHAR (50),
	last_name VARCHAR (50),
	birth_date DATE CHECK (birth_date > '1900-01-01'),
	joined_date DATE CHECK (joined_date > birth_date),
	salary numeric CHECK(salary > 0)
);

INSERT INTO employees (first_name, last_name, birth_date, joined_date, salary)
VALUES ('John', 'Doe', '1972-01-01', '2015-07-01', 100000);

select * from employees;

-------not null-------------------------

DROP TABLE IF EXISTS salary;

CREATE TABLE salary(
  NOT NULL
);


------------UNIQUE------------------
drop table if exists person;

CREATE TABLE person (
	id SERIAL PRIMARY KEY,
	first_name VARCHAR (50),
	last_name VARCHAR (50),
	email VARCHAR (50) UNIQUE
);

CREATE TABLE person (
	id SERIAL  PRIMARY KEY,
	first_name VARCHAR (50),
	last_name  VARCHAR (50),
	email      VARCHAR (50),
        UNIQUE(email)
);

INSERT INTO person(first_name,last_name,email)
VALUES('john','doe','j.doe@postgresqltutorial.com');

INSERT INTO person(first_name,last_name,email)
VALUES('john','doe','j.doe@postgresqltutorial.com');

ALTER TABLE equipment 
ADD CONSTRAINT unique_equip_id 
UNIQUE USING INDEX equipment_equip_id;

select * from person;