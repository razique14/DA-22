# -*- coding: utf-8 -*-
"""Data Frames

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e40ghHkFroTbb0JuKHTmKUxc3Giz0T_x

Pandas-

Pandas

Pandas stands for - Panel Data

It is the core library for data manipulation and data analysis.

It consists of single and multi dimensional data structures and data manipulation
"""

import pandas as pd

print(pd.__version__)

"""Pandas series 

Pandas dataframes

Series

A pandas Series is a one-dimensional labelled data structure which can hold data such as strings, integers and even other Python objects. It is built on top of numpy array and is the primary data structure to hold one-dimensional data in pandas.
"""

import pandas as pd

a = pd.Series([1,2,3,4,5])
print(a,type(a))

a = pd.Series([1,2,3,'raz'])
print(a,type(a))

a = pd.Series([1,2,3,4,5.5])
print(a,type(a))

a = pd.Series([1,2,3,4,5+3j])
print(a,type(a))

a = pd.Series([1,2,3,(4,5)])
print(a,type(a))

a = pd.Series([1,2,3,{4,5}])
print(a,type(a))

a = pd.Series([1,2,3,[4,5]])
print(a,type(a))

a = pd.Series([False,True])
print(a,type(a))

import pandas as pd

a = pd.Series([1,2,3,4],index=[2,3,4,5])
a
# type(a)

import pandas as pd
a = pd.Series({11:1,12:2,13:3,14:4}, index=[15,13,12,11])
a

import pandas as pd
a = pd.Series(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','q','r','s','t','u','v','x','y','z'])
a

import pandas as pd
a = pd.Series([])
a

a = ' '
for i in range(65,91):
  # a = pd.Series([chr(i)])
  a+=chr(i)
a

# zip method
import numpy as np
alpha = list('abcdefghijklmnopqrstuvwxyz')
ind = np.arange(26)
ind, alpha
pd.Series(alpha)

# zip method
alpha = list('abcdefghijklmnopqrstuvwxyz')
ind = np.arange(1,27)
# ind, alpha
pd.Series(alpha,index=ind)

"""Arithmetic operations"""

import pandas as pd
a = pd.Series([1,2,3,4,5])
b = pd.Series([6,7,8,9,10])
# a+b
# b-a
# a*b
# a*2
# b*3
# b/a
# a%b
# b//a
# a+4

"""Comparision Operations"""

a = pd.Series([1,2,3,4,5])
b = pd.Series([1,7,3,9,10])
# a>=b
# b>=a
# a<=b
b<=a

"""Logical operations"""

a = pd.Series([1,14,12,3,5])
b = pd.Series([6,7,3,4,10])
a==b
# a!=b
# a>b
# b<a

"""Bitwise operations"""

a = pd.Series([1,14,3,12,5])
b = pd.Series([6,7,8,4,10])
a&b
a|b
a^b

a = pd.Series([1,14,3,12,5])
b = pd.Series([6,7,8,4,10])
pd.mean(a)

a = pd.Series(np.random.randint(6))
a

a = pd.Series(np.random.randint(1,10,6))
a

a = pd.Series(np.random.randint(1,10,6),index=['a','b','c','d','e','f'])
a

a = a.reindex(index=['c','e','d','f','b','a'])
# a
a['e']

data1 = np.random.randint(1,10,5)
data2 = np.random.randint(1,10,5)

data1 = pd.Series(data1)
data2 = pd.Series(data2)

data1, data2

data1.index

data2 = data2.reindex(index=[0,5,2,4,5])

data1==data2

# To merge two series we will use append() method
a = pd.Series([1,14,3,12,5])
b = pd.Series([6,7,8,4,10])
a.append(b)

data1 = pd.Series([1,14,3,12,5])
data2 = pd.Series([6,7,8,4,10])

data1 = pd.Series({'a':1,'b':2,'c':3})
data1

data1= data1.append(pd.Series([4,5])).reset_index(drop=True)

data1

# map
def fun(a):
  return len(a)
fun('raz')

# fun('raz')
d = ['akhi','python','wasim','ahmed','london']

[fun(i) for i in d]

s = map(fun,d)
# list(s)
# set(s)
tuple(s)

#  To have same values in a series
pd.Series(10,['a','b','c','d','e'])

data1 = np.random.randint(1,15,15)
data1 = pd.Series(data1)

data1

data1.index

data1[data1.index %2 != 0]

data1[[5,7,9]]

data1 = np.random.randint(1,15,15)
data1 = pd.Series(data1,name = 'Scores')
data1

data1.name
data1.rename('razique')

"""Data Frames

Dataframes are two dimensional labelled data-structure.

Dataframes consist of rows and columns.

axis=0 means rows, axis=1 means columns
"""

import pandas as pd



a = pd.DataFrame({'state':['Bihar','U.P','Goa'],'rankings':[3,2,1]})
a

"""Data Frames using series """

import numpy as np
data1 = np.random.randint(1,10,5)
data2 = np.random.randint(1,10,5)

data1 = pd.Series(data1,index=['a','b','c','d','e'])
data2 = pd.Series(data2, index=['a','b','c','d','e'])

data = {'one': data1, 'two':data2}

df1 = pd.DataFrame(data)
df1

df1.columns

# df1['one']
# df1['two']

"""Slicing"""

df1 = pd.DataFrame(data)
df1

# df1[::2]
# df1[:2]
# df1['one'][0] #first value of one
# df1['one'][:2]

df1.head(3)

df.tail(2)

data1 = np.random.randint(1,10,4)
data2 = np.random.randint(1,10,4)
data3 = np.random.randint(1,10,4)

data1 = pd.Series(data1,index=['a','b','c','d'])
data2 = pd.Series(data2, index=['a','b','c','d'])
data3 = pd.Series(data3,index=['a','b','c','d'])

data = {'one': data1, 'two':data2, 'three':data3}

df1 = pd.DataFrame(data)
df1

#2nd way
a = pd.DataFrame({'one':np.random.randint(1,10,4),'two':np.random.randint(1,10,4),'three':np.random.randint(1,10,4)})
a

a = pd.DataFrame(np.random.randn(5,3),index=['a','b','c','d','e'],columns=['one','two','three'])
a

a['four']=0
a

# a ['two']
# a[['one','five']]

a[a['two'] > 0.2]
# a

# create a column called five which is result of product first two columns
a['five'] =a['one']*a['two']
a

# loc method will find the given row
a.loc['b']

a.loc['f'] = np.random.randn()
a

# del(a.loc['f'])
# a

df[['six','seven']] = np.mean()

a.loc[['a','b']][:]

a.loc[:,['one','two','three']][:3]

# a.mean(a.loc[:,['one','two','three']],axis=1)

a.iloc[1:3,2:6]





df = pd.read_csv('https://download.mlcc.google.com/mledu-datasets/california_housing_train.csv')
df

df.head(100)

df.tail(10)

df.describe()

df.info()

df.columns

n = 17000
df[['latitude', 'housing_median_age', 'total_rooms']][df[(n/2)-5:(n/2)+5] ]

n = 17000
df.iloc[int(len(df)/2)-5:int(len(df)/2)+5,1:4]